/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.rightnow.logging.events;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** An error on the contract of a GenericEvent */
@org.apache.avro.specific.AvroGenerated
public class EventError extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1521430575984938114L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EventError\",\"namespace\":\"org.rightnow.logging.events\",\"doc\":\"An error on the contract of a GenericEvent\",\"fields\":[{\"name\":\"errors\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"error\",\"doc\":\"An error for an event\",\"fields\":[{\"name\":\"field\",\"type\":\"string\",\"doc\":\"The field the error is on\"},{\"name\":\"reason\",\"type\":\"string\",\"doc\":\"The reason the field is causing an error\"}]}}},{\"name\":\"event_timestamp\",\"type\":\"long\",\"doc\":\"The UTC time the event occurred\"},{\"name\":\"error_timestamp\",\"type\":\"long\",\"doc\":\"The UTC time the error was processed\"},{\"name\":\"error_date\",\"type\":\"string\",\"doc\":\"The UTC date the error was processed\"},{\"name\":\"original_event\",\"type\":{\"type\":\"record\",\"name\":\"GenericEvent\",\"doc\":\"A generic event\",\"fields\":[{\"name\":\"event_initiator\",\"type\":\"string\",\"doc\":\"A combination of factors to identify the initiator of the event\"},{\"name\":\"event_name\",\"type\":\"string\",\"doc\":\"The common name of the event\"},{\"name\":\"event_id\",\"type\":\"string\",\"doc\":\"The ID of the initiating request\"},{\"name\":\"correlated_event_id\",\"type\":\"string\",\"doc\":\"The ID of the correlated request\"},{\"name\":\"session_id\",\"type\":\"string\",\"doc\":\"The ID of the user session that first generated the request\"},{\"name\":\"user_id\",\"type\":\"int\",\"doc\":\"The user ID associated with the event\"},{\"name\":\"org_id\",\"type\":\"int\",\"doc\":\"The organization ID associated with the event\"},{\"name\":\"staff_id\",\"type\":\"int\",\"doc\":\"The staff ID associated with the event\"},{\"name\":\"ip_address\",\"type\":\"string\",\"doc\":\"The ip address of the server from which the event originated\"},{\"name\":\"aws_id\",\"type\":\"string\",\"doc\":\"The EC2 instance ID of the server triggering the event\"},{\"name\":\"timestamp\",\"type\":\"long\",\"doc\":\"The UTC time the event occurred\"},{\"name\":\"elapsed_time\",\"type\":\"long\",\"doc\":\"The total elapsed time to complete the event in milliseconds\"},{\"name\":\"event_details\",\"type\":\"string\",\"doc\":\"An arbitrary JSON object that stores event details like browser user agent OS type and version\"},{\"name\":\"event_date\",\"type\":\"string\",\"doc\":\"The UTC date the event occured\"}]},\"doc\":\"The record of the event\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.util.List<org.rightnow.logging.events.error> errors;
  /** The UTC time the event occurred */
  @Deprecated public long event_timestamp;
  /** The UTC time the error was processed */
  @Deprecated public long error_timestamp;
  /** The UTC date the error was processed */
  @Deprecated public CharSequence error_date;
  /** The record of the event */
  @Deprecated public org.rightnow.logging.events.GenericEvent original_event;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public EventError() {}

  /**
   * All-args constructor.
   * @param errors The new value for errors
   * @param event_timestamp The UTC time the event occurred
   * @param error_timestamp The UTC time the error was processed
   * @param error_date The UTC date the error was processed
   * @param original_event The record of the event
   */
  public EventError(java.util.List<org.rightnow.logging.events.error> errors, Long event_timestamp, Long error_timestamp, CharSequence error_date, org.rightnow.logging.events.GenericEvent original_event) {
    this.errors = errors;
    this.event_timestamp = event_timestamp;
    this.error_timestamp = error_timestamp;
    this.error_date = error_date;
    this.original_event = original_event;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return errors;
    case 1: return event_timestamp;
    case 2: return error_timestamp;
    case 3: return error_date;
    case 4: return original_event;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: errors = (java.util.List<org.rightnow.logging.events.error>)value$; break;
    case 1: event_timestamp = (Long)value$; break;
    case 2: error_timestamp = (Long)value$; break;
    case 3: error_date = (CharSequence)value$; break;
    case 4: original_event = (org.rightnow.logging.events.GenericEvent)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'errors' field.
   * @return The value of the 'errors' field.
   */
  public java.util.List<org.rightnow.logging.events.error> getErrors() {
    return errors;
  }

  /**
   * Sets the value of the 'errors' field.
   * @param value the value to set.
   */
  public void setErrors(java.util.List<org.rightnow.logging.events.error> value) {
    this.errors = value;
  }

  /**
   * Gets the value of the 'event_timestamp' field.
   * @return The UTC time the event occurred
   */
  public Long getEventTimestamp() {
    return event_timestamp;
  }

  /**
   * Sets the value of the 'event_timestamp' field.
   * The UTC time the event occurred
   * @param value the value to set.
   */
  public void setEventTimestamp(Long value) {
    this.event_timestamp = value;
  }

  /**
   * Gets the value of the 'error_timestamp' field.
   * @return The UTC time the error was processed
   */
  public Long getErrorTimestamp() {
    return error_timestamp;
  }

  /**
   * Sets the value of the 'error_timestamp' field.
   * The UTC time the error was processed
   * @param value the value to set.
   */
  public void setErrorTimestamp(Long value) {
    this.error_timestamp = value;
  }

  /**
   * Gets the value of the 'error_date' field.
   * @return The UTC date the error was processed
   */
  public CharSequence getErrorDate() {
    return error_date;
  }

  /**
   * Sets the value of the 'error_date' field.
   * The UTC date the error was processed
   * @param value the value to set.
   */
  public void setErrorDate(CharSequence value) {
    this.error_date = value;
  }

  /**
   * Gets the value of the 'original_event' field.
   * @return The record of the event
   */
  public org.rightnow.logging.events.GenericEvent getOriginalEvent() {
    return original_event;
  }

  /**
   * Sets the value of the 'original_event' field.
   * The record of the event
   * @param value the value to set.
   */
  public void setOriginalEvent(org.rightnow.logging.events.GenericEvent value) {
    this.original_event = value;
  }

  /**
   * Creates a new EventError RecordBuilder.
   * @return A new EventError RecordBuilder
   */
  public static org.rightnow.logging.events.EventError.Builder newBuilder() {
    return new org.rightnow.logging.events.EventError.Builder();
  }

  /**
   * Creates a new EventError RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new EventError RecordBuilder
   */
  public static org.rightnow.logging.events.EventError.Builder newBuilder(org.rightnow.logging.events.EventError.Builder other) {
    return new org.rightnow.logging.events.EventError.Builder(other);
  }

  /**
   * Creates a new EventError RecordBuilder by copying an existing EventError instance.
   * @param other The existing instance to copy.
   * @return A new EventError RecordBuilder
   */
  public static org.rightnow.logging.events.EventError.Builder newBuilder(org.rightnow.logging.events.EventError other) {
    return new org.rightnow.logging.events.EventError.Builder(other);
  }

  /**
   * RecordBuilder for EventError instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<EventError>
    implements org.apache.avro.data.RecordBuilder<EventError> {

    private java.util.List<org.rightnow.logging.events.error> errors;
    /** The UTC time the event occurred */
    private long event_timestamp;
    /** The UTC time the error was processed */
    private long error_timestamp;
    /** The UTC date the error was processed */
    private CharSequence error_date;
    /** The record of the event */
    private org.rightnow.logging.events.GenericEvent original_event;
    private org.rightnow.logging.events.GenericEvent.Builder original_eventBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.rightnow.logging.events.EventError.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.errors)) {
        this.errors = data().deepCopy(fields()[0].schema(), other.errors);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.event_timestamp)) {
        this.event_timestamp = data().deepCopy(fields()[1].schema(), other.event_timestamp);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.error_timestamp)) {
        this.error_timestamp = data().deepCopy(fields()[2].schema(), other.error_timestamp);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.error_date)) {
        this.error_date = data().deepCopy(fields()[3].schema(), other.error_date);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.original_event)) {
        this.original_event = data().deepCopy(fields()[4].schema(), other.original_event);
        fieldSetFlags()[4] = true;
      }
      if (other.hasOriginalEventBuilder()) {
        this.original_eventBuilder = org.rightnow.logging.events.GenericEvent.newBuilder(other.getOriginalEventBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing EventError instance
     * @param other The existing instance to copy.
     */
    private Builder(org.rightnow.logging.events.EventError other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.errors)) {
        this.errors = data().deepCopy(fields()[0].schema(), other.errors);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.event_timestamp)) {
        this.event_timestamp = data().deepCopy(fields()[1].schema(), other.event_timestamp);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.error_timestamp)) {
        this.error_timestamp = data().deepCopy(fields()[2].schema(), other.error_timestamp);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.error_date)) {
        this.error_date = data().deepCopy(fields()[3].schema(), other.error_date);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.original_event)) {
        this.original_event = data().deepCopy(fields()[4].schema(), other.original_event);
        fieldSetFlags()[4] = true;
      }
      this.original_eventBuilder = null;
    }

    /**
      * Gets the value of the 'errors' field.
      * @return The value.
      */
    public java.util.List<org.rightnow.logging.events.error> getErrors() {
      return errors;
    }

    /**
      * Sets the value of the 'errors' field.
      * @param value The value of 'errors'.
      * @return This builder.
      */
    public org.rightnow.logging.events.EventError.Builder setErrors(java.util.List<org.rightnow.logging.events.error> value) {
      validate(fields()[0], value);
      this.errors = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'errors' field has been set.
      * @return True if the 'errors' field has been set, false otherwise.
      */
    public boolean hasErrors() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'errors' field.
      * @return This builder.
      */
    public org.rightnow.logging.events.EventError.Builder clearErrors() {
      errors = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'event_timestamp' field.
      * The UTC time the event occurred
      * @return The value.
      */
    public Long getEventTimestamp() {
      return event_timestamp;
    }

    /**
      * Sets the value of the 'event_timestamp' field.
      * The UTC time the event occurred
      * @param value The value of 'event_timestamp'.
      * @return This builder.
      */
    public org.rightnow.logging.events.EventError.Builder setEventTimestamp(long value) {
      validate(fields()[1], value);
      this.event_timestamp = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'event_timestamp' field has been set.
      * The UTC time the event occurred
      * @return True if the 'event_timestamp' field has been set, false otherwise.
      */
    public boolean hasEventTimestamp() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'event_timestamp' field.
      * The UTC time the event occurred
      * @return This builder.
      */
    public org.rightnow.logging.events.EventError.Builder clearEventTimestamp() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'error_timestamp' field.
      * The UTC time the error was processed
      * @return The value.
      */
    public Long getErrorTimestamp() {
      return error_timestamp;
    }

    /**
      * Sets the value of the 'error_timestamp' field.
      * The UTC time the error was processed
      * @param value The value of 'error_timestamp'.
      * @return This builder.
      */
    public org.rightnow.logging.events.EventError.Builder setErrorTimestamp(long value) {
      validate(fields()[2], value);
      this.error_timestamp = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'error_timestamp' field has been set.
      * The UTC time the error was processed
      * @return True if the 'error_timestamp' field has been set, false otherwise.
      */
    public boolean hasErrorTimestamp() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'error_timestamp' field.
      * The UTC time the error was processed
      * @return This builder.
      */
    public org.rightnow.logging.events.EventError.Builder clearErrorTimestamp() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'error_date' field.
      * The UTC date the error was processed
      * @return The value.
      */
    public CharSequence getErrorDate() {
      return error_date;
    }

    /**
      * Sets the value of the 'error_date' field.
      * The UTC date the error was processed
      * @param value The value of 'error_date'.
      * @return This builder.
      */
    public org.rightnow.logging.events.EventError.Builder setErrorDate(CharSequence value) {
      validate(fields()[3], value);
      this.error_date = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'error_date' field has been set.
      * The UTC date the error was processed
      * @return True if the 'error_date' field has been set, false otherwise.
      */
    public boolean hasErrorDate() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'error_date' field.
      * The UTC date the error was processed
      * @return This builder.
      */
    public org.rightnow.logging.events.EventError.Builder clearErrorDate() {
      error_date = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'original_event' field.
      * The record of the event
      * @return The value.
      */
    public org.rightnow.logging.events.GenericEvent getOriginalEvent() {
      return original_event;
    }

    /**
      * Sets the value of the 'original_event' field.
      * The record of the event
      * @param value The value of 'original_event'.
      * @return This builder.
      */
    public org.rightnow.logging.events.EventError.Builder setOriginalEvent(org.rightnow.logging.events.GenericEvent value) {
      validate(fields()[4], value);
      this.original_eventBuilder = null;
      this.original_event = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'original_event' field has been set.
      * The record of the event
      * @return True if the 'original_event' field has been set, false otherwise.
      */
    public boolean hasOriginalEvent() {
      return fieldSetFlags()[4];
    }

    /**
     * Gets the Builder instance for the 'original_event' field and creates one if it doesn't exist yet.
     * The record of the event
     * @return This builder.
     */
    public org.rightnow.logging.events.GenericEvent.Builder getOriginalEventBuilder() {
      if (original_eventBuilder == null) {
        if (hasOriginalEvent()) {
          setOriginalEventBuilder(org.rightnow.logging.events.GenericEvent.newBuilder(original_event));
        } else {
          setOriginalEventBuilder(org.rightnow.logging.events.GenericEvent.newBuilder());
        }
      }
      return original_eventBuilder;
    }

    /**
     * Sets the Builder instance for the 'original_event' field
     * The record of the event
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public org.rightnow.logging.events.EventError.Builder setOriginalEventBuilder(org.rightnow.logging.events.GenericEvent.Builder value) {
      clearOriginalEvent();
      original_eventBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'original_event' field has an active Builder instance
     * The record of the event
     * @return True if the 'original_event' field has an active Builder instance
     */
    public boolean hasOriginalEventBuilder() {
      return original_eventBuilder != null;
    }

    /**
      * Clears the value of the 'original_event' field.
      * The record of the event
      * @return This builder.
      */
    public org.rightnow.logging.events.EventError.Builder clearOriginalEvent() {
      original_event = null;
      original_eventBuilder = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public EventError build() {
      try {
        EventError record = new EventError();
        record.errors = fieldSetFlags()[0] ? this.errors : (java.util.List<org.rightnow.logging.events.error>) defaultValue(fields()[0]);
        record.event_timestamp = fieldSetFlags()[1] ? this.event_timestamp : (Long) defaultValue(fields()[1]);
        record.error_timestamp = fieldSetFlags()[2] ? this.error_timestamp : (Long) defaultValue(fields()[2]);
        record.error_date = fieldSetFlags()[3] ? this.error_date : (CharSequence) defaultValue(fields()[3]);
        if (original_eventBuilder != null) {
          record.original_event = this.original_eventBuilder.build();
        } else {
          record.original_event = fieldSetFlags()[4] ? this.original_event : (org.rightnow.logging.events.GenericEvent) defaultValue(fields()[4]);
        }
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
