/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.rightnow.logging.events;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** A generic event */
@org.apache.avro.specific.AvroGenerated
public class GenericEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8770779603554253649L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"GenericEvent\",\"namespace\":\"org.rightnow.logging.events\",\"doc\":\"A generic event\",\"fields\":[{\"name\":\"event_initiator\",\"type\":\"string\",\"doc\":\"A combination of factors to identify the initiator of the event\"},{\"name\":\"event_name\",\"type\":\"string\",\"doc\":\"The common name of the event\"},{\"name\":\"event_id\",\"type\":\"string\",\"doc\":\"The ID of the initiating request\"},{\"name\":\"correlated_event_id\",\"type\":\"string\",\"doc\":\"The ID of the correlated request\"},{\"name\":\"session_id\",\"type\":\"string\",\"doc\":\"The ID of the user session that first generated the request\"},{\"name\":\"user_id\",\"type\":\"int\",\"doc\":\"The user ID associated with the event\"},{\"name\":\"org_id\",\"type\":\"int\",\"doc\":\"The organization ID associated with the event\"},{\"name\":\"staff_id\",\"type\":\"int\",\"doc\":\"The staff ID associated with the event\"},{\"name\":\"ip_address\",\"type\":\"string\",\"doc\":\"The ip address of the server from which the event originated\"},{\"name\":\"aws_id\",\"type\":\"string\",\"doc\":\"The EC2 instance ID of the server triggering the event\"},{\"name\":\"timestamp\",\"type\":\"long\",\"doc\":\"The UTC time the event occurred\"},{\"name\":\"elapsed_time\",\"type\":\"long\",\"doc\":\"The total elapsed time to complete the event in milliseconds\"},{\"name\":\"event_details\",\"type\":\"string\",\"doc\":\"An arbitrary JSON object that stores event details like browser user agent OS type and version\"},{\"name\":\"event_date\",\"type\":\"string\",\"doc\":\"The UTC date the event occured\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** A combination of factors to identify the initiator of the event */
  @Deprecated public CharSequence event_initiator;
  /** The common name of the event */
  @Deprecated public CharSequence event_name;
  /** The ID of the initiating request */
  @Deprecated public CharSequence event_id;
  /** The ID of the correlated request */
  @Deprecated public CharSequence correlated_event_id;
  /** The ID of the user session that first generated the request */
  @Deprecated public CharSequence session_id;
  /** The user ID associated with the event */
  @Deprecated public int user_id;
  /** The organization ID associated with the event */
  @Deprecated public int org_id;
  /** The staff ID associated with the event */
  @Deprecated public int staff_id;
  /** The ip address of the server from which the event originated */
  @Deprecated public CharSequence ip_address;
  /** The EC2 instance ID of the server triggering the event */
  @Deprecated public CharSequence aws_id;
  /** The UTC time the event occurred */
  @Deprecated public long timestamp;
  /** The total elapsed time to complete the event in milliseconds */
  @Deprecated public long elapsed_time;
  /** An arbitrary JSON object that stores event details like browser user agent OS type and version */
  @Deprecated public CharSequence event_details;
  /** The UTC date the event occured */
  @Deprecated public CharSequence event_date;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public GenericEvent() {}

  /**
   * All-args constructor.
   * @param event_initiator A combination of factors to identify the initiator of the event
   * @param event_name The common name of the event
   * @param event_id The ID of the initiating request
   * @param correlated_event_id The ID of the correlated request
   * @param session_id The ID of the user session that first generated the request
   * @param user_id The user ID associated with the event
   * @param org_id The organization ID associated with the event
   * @param staff_id The staff ID associated with the event
   * @param ip_address The ip address of the server from which the event originated
   * @param aws_id The EC2 instance ID of the server triggering the event
   * @param timestamp The UTC time the event occurred
   * @param elapsed_time The total elapsed time to complete the event in milliseconds
   * @param event_details An arbitrary JSON object that stores event details like browser user agent OS type and version
   * @param event_date The UTC date the event occured
   */
  public GenericEvent(CharSequence event_initiator, CharSequence event_name, CharSequence event_id, CharSequence correlated_event_id, CharSequence session_id, Integer user_id, Integer org_id, Integer staff_id, CharSequence ip_address, CharSequence aws_id, Long timestamp, Long elapsed_time, CharSequence event_details, CharSequence event_date) {
    this.event_initiator = event_initiator;
    this.event_name = event_name;
    this.event_id = event_id;
    this.correlated_event_id = correlated_event_id;
    this.session_id = session_id;
    this.user_id = user_id;
    this.org_id = org_id;
    this.staff_id = staff_id;
    this.ip_address = ip_address;
    this.aws_id = aws_id;
    this.timestamp = timestamp;
    this.elapsed_time = elapsed_time;
    this.event_details = event_details;
    this.event_date = event_date;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
      case 0: return event_initiator;
      case 1: return event_name;
      case 2: return event_id;
      case 3: return correlated_event_id;
      case 4: return session_id;
      case 5: return user_id;
      case 6: return org_id;
      case 7: return staff_id;
      case 8: return ip_address;
      case 9: return aws_id;
      case 10: return timestamp;
      case 11: return elapsed_time;
      case 12: return event_details;
      case 13: return event_date;
      default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
      case 0: event_initiator = (CharSequence)value$; break;
      case 1: event_name = (CharSequence)value$; break;
      case 2: event_id = (CharSequence)value$; break;
      case 3: correlated_event_id = (CharSequence)value$; break;
      case 4: session_id = (CharSequence)value$; break;
      case 5: user_id = (Integer)value$; break;
      case 6: org_id = (Integer)value$; break;
      case 7: staff_id = (Integer)value$; break;
      case 8: ip_address = (CharSequence)value$; break;
      case 9: aws_id = (CharSequence)value$; break;
      case 10: timestamp = (Long)value$; break;
      case 11: elapsed_time = (Long)value$; break;
      case 12: event_details = (CharSequence)value$; break;
      case 13: event_date = (CharSequence)value$; break;
      default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'event_initiator' field.
   * @return A combination of factors to identify the initiator of the event
   */
  public CharSequence getEventInitiator() {
    return event_initiator;
  }

  /**
   * Sets the value of the 'event_initiator' field.
   * A combination of factors to identify the initiator of the event
   * @param value the value to set.
   */
  public void setEventInitiator(CharSequence value) {
    this.event_initiator = value;
  }

  /**
   * Gets the value of the 'event_name' field.
   * @return The common name of the event
   */
  public CharSequence getEventName() {
    return event_name;
  }

  /**
   * Sets the value of the 'event_name' field.
   * The common name of the event
   * @param value the value to set.
   */
  public void setEventName(CharSequence value) {
    this.event_name = value;
  }

  /**
   * Gets the value of the 'event_id' field.
   * @return The ID of the initiating request
   */
  public CharSequence getEventId() {
    return event_id;
  }

  /**
   * Sets the value of the 'event_id' field.
   * The ID of the initiating request
   * @param value the value to set.
   */
  public void setEventId(CharSequence value) {
    this.event_id = value;
  }

  /**
   * Gets the value of the 'correlated_event_id' field.
   * @return The ID of the correlated request
   */
  public CharSequence getCorrelatedEventId() {
    return correlated_event_id;
  }

  /**
   * Sets the value of the 'correlated_event_id' field.
   * The ID of the correlated request
   * @param value the value to set.
   */
  public void setCorrelatedEventId(CharSequence value) {
    this.correlated_event_id = value;
  }

  /**
   * Gets the value of the 'session_id' field.
   * @return The ID of the user session that first generated the request
   */
  public CharSequence getSessionId() {
    return session_id;
  }

  /**
   * Sets the value of the 'session_id' field.
   * The ID of the user session that first generated the request
   * @param value the value to set.
   */
  public void setSessionId(CharSequence value) {
    this.session_id = value;
  }

  /**
   * Gets the value of the 'user_id' field.
   * @return The user ID associated with the event
   */
  public Integer getUserId() {
    return user_id;
  }

  /**
   * Sets the value of the 'user_id' field.
   * The user ID associated with the event
   * @param value the value to set.
   */
  public void setUserId(Integer value) {
    this.user_id = value;
  }

  /**
   * Gets the value of the 'org_id' field.
   * @return The organization ID associated with the event
   */
  public Integer getOrgId() {
    return org_id;
  }

  /**
   * Sets the value of the 'org_id' field.
   * The organization ID associated with the event
   * @param value the value to set.
   */
  public void setOrgId(Integer value) {
    this.org_id = value;
  }

  /**
   * Gets the value of the 'staff_id' field.
   * @return The staff ID associated with the event
   */
  public Integer getStaffId() {
    return staff_id;
  }

  /**
   * Sets the value of the 'staff_id' field.
   * The staff ID associated with the event
   * @param value the value to set.
   */
  public void setStaffId(Integer value) {
    this.staff_id = value;
  }

  /**
   * Gets the value of the 'ip_address' field.
   * @return The ip address of the server from which the event originated
   */
  public CharSequence getIpAddress() {
    return ip_address;
  }

  /**
   * Sets the value of the 'ip_address' field.
   * The ip address of the server from which the event originated
   * @param value the value to set.
   */
  public void setIpAddress(CharSequence value) {
    this.ip_address = value;
  }

  /**
   * Gets the value of the 'aws_id' field.
   * @return The EC2 instance ID of the server triggering the event
   */
  public CharSequence getAwsId() {
    return aws_id;
  }

  /**
   * Sets the value of the 'aws_id' field.
   * The EC2 instance ID of the server triggering the event
   * @param value the value to set.
   */
  public void setAwsId(CharSequence value) {
    this.aws_id = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The UTC time the event occurred
   */
  public Long getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * The UTC time the event occurred
   * @param value the value to set.
   */
  public void setTimestamp(Long value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'elapsed_time' field.
   * @return The total elapsed time to complete the event in milliseconds
   */
  public Long getElapsedTime() {
    return elapsed_time;
  }

  /**
   * Sets the value of the 'elapsed_time' field.
   * The total elapsed time to complete the event in milliseconds
   * @param value the value to set.
   */
  public void setElapsedTime(Long value) {
    this.elapsed_time = value;
  }

  /**
   * Gets the value of the 'event_details' field.
   * @return An arbitrary JSON object that stores event details like browser user agent OS type and version
   */
  public CharSequence getEventDetails() {
    return event_details;
  }

  /**
   * Sets the value of the 'event_details' field.
   * An arbitrary JSON object that stores event details like browser user agent OS type and version
   * @param value the value to set.
   */
  public void setEventDetails(CharSequence value) {
    this.event_details = value;
  }

  /**
   * Gets the value of the 'event_date' field.
   * @return The UTC date the event occured
   */
  public CharSequence getEventDate() {
    return event_date;
  }

  /**
   * Sets the value of the 'event_date' field.
   * The UTC date the event occured
   * @param value the value to set.
   */
  public void setEventDate(CharSequence value) {
    this.event_date = value;
  }

  /**
   * Creates a new GenericEvent RecordBuilder.
   * @return A new GenericEvent RecordBuilder
   */
  public static org.rightnow.logging.events.GenericEvent.Builder newBuilder() {
    return new org.rightnow.logging.events.GenericEvent.Builder();
  }

  /**
   * Creates a new GenericEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new GenericEvent RecordBuilder
   */
  public static org.rightnow.logging.events.GenericEvent.Builder newBuilder(org.rightnow.logging.events.GenericEvent.Builder other) {
    return new org.rightnow.logging.events.GenericEvent.Builder(other);
  }

  /**
   * Creates a new GenericEvent RecordBuilder by copying an existing GenericEvent instance.
   * @param other The existing instance to copy.
   * @return A new GenericEvent RecordBuilder
   */
  public static org.rightnow.logging.events.GenericEvent.Builder newBuilder(org.rightnow.logging.events.GenericEvent other) {
    return new org.rightnow.logging.events.GenericEvent.Builder(other);
  }

  /**
   * RecordBuilder for GenericEvent instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<GenericEvent>
          implements org.apache.avro.data.RecordBuilder<GenericEvent> {

    /** A combination of factors to identify the initiator of the event */
    private CharSequence event_initiator;
    /** The common name of the event */
    private CharSequence event_name;
    /** The ID of the initiating request */
    private CharSequence event_id;
    /** The ID of the correlated request */
    private CharSequence correlated_event_id;
    /** The ID of the user session that first generated the request */
    private CharSequence session_id;
    /** The user ID associated with the event */
    private int user_id;
    /** The organization ID associated with the event */
    private int org_id;
    /** The staff ID associated with the event */
    private int staff_id;
    /** The ip address of the server from which the event originated */
    private CharSequence ip_address;
    /** The EC2 instance ID of the server triggering the event */
    private CharSequence aws_id;
    /** The UTC time the event occurred */
    private long timestamp;
    /** The total elapsed time to complete the event in milliseconds */
    private long elapsed_time;
    /** An arbitrary JSON object that stores event details like browser user agent OS type and version */
    private CharSequence event_details;
    /** The UTC date the event occured */
    private CharSequence event_date;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.rightnow.logging.events.GenericEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.event_initiator)) {
        this.event_initiator = data().deepCopy(fields()[0].schema(), other.event_initiator);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.event_name)) {
        this.event_name = data().deepCopy(fields()[1].schema(), other.event_name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.event_id)) {
        this.event_id = data().deepCopy(fields()[2].schema(), other.event_id);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.correlated_event_id)) {
        this.correlated_event_id = data().deepCopy(fields()[3].schema(), other.correlated_event_id);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.session_id)) {
        this.session_id = data().deepCopy(fields()[4].schema(), other.session_id);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.user_id)) {
        this.user_id = data().deepCopy(fields()[5].schema(), other.user_id);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.org_id)) {
        this.org_id = data().deepCopy(fields()[6].schema(), other.org_id);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.staff_id)) {
        this.staff_id = data().deepCopy(fields()[7].schema(), other.staff_id);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.ip_address)) {
        this.ip_address = data().deepCopy(fields()[8].schema(), other.ip_address);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.aws_id)) {
        this.aws_id = data().deepCopy(fields()[9].schema(), other.aws_id);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[10].schema(), other.timestamp);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.elapsed_time)) {
        this.elapsed_time = data().deepCopy(fields()[11].schema(), other.elapsed_time);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.event_details)) {
        this.event_details = data().deepCopy(fields()[12].schema(), other.event_details);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.event_date)) {
        this.event_date = data().deepCopy(fields()[13].schema(), other.event_date);
        fieldSetFlags()[13] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing GenericEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(org.rightnow.logging.events.GenericEvent other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.event_initiator)) {
        this.event_initiator = data().deepCopy(fields()[0].schema(), other.event_initiator);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.event_name)) {
        this.event_name = data().deepCopy(fields()[1].schema(), other.event_name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.event_id)) {
        this.event_id = data().deepCopy(fields()[2].schema(), other.event_id);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.correlated_event_id)) {
        this.correlated_event_id = data().deepCopy(fields()[3].schema(), other.correlated_event_id);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.session_id)) {
        this.session_id = data().deepCopy(fields()[4].schema(), other.session_id);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.user_id)) {
        this.user_id = data().deepCopy(fields()[5].schema(), other.user_id);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.org_id)) {
        this.org_id = data().deepCopy(fields()[6].schema(), other.org_id);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.staff_id)) {
        this.staff_id = data().deepCopy(fields()[7].schema(), other.staff_id);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.ip_address)) {
        this.ip_address = data().deepCopy(fields()[8].schema(), other.ip_address);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.aws_id)) {
        this.aws_id = data().deepCopy(fields()[9].schema(), other.aws_id);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[10].schema(), other.timestamp);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.elapsed_time)) {
        this.elapsed_time = data().deepCopy(fields()[11].schema(), other.elapsed_time);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.event_details)) {
        this.event_details = data().deepCopy(fields()[12].schema(), other.event_details);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.event_date)) {
        this.event_date = data().deepCopy(fields()[13].schema(), other.event_date);
        fieldSetFlags()[13] = true;
      }
    }

    /**
     * Gets the value of the 'event_initiator' field.
     * A combination of factors to identify the initiator of the event
     * @return The value.
     */
    public CharSequence getEventInitiator() {
      return event_initiator;
    }

    /**
     * Sets the value of the 'event_initiator' field.
     * A combination of factors to identify the initiator of the event
     * @param value The value of 'event_initiator'.
     * @return This builder.
     */
    public org.rightnow.logging.events.GenericEvent.Builder setEventInitiator(CharSequence value) {
      validate(fields()[0], value);
      this.event_initiator = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
     * Checks whether the 'event_initiator' field has been set.
     * A combination of factors to identify the initiator of the event
     * @return True if the 'event_initiator' field has been set, false otherwise.
     */
    public boolean hasEventInitiator() {
      return fieldSetFlags()[0];
    }


    /**
     * Clears the value of the 'event_initiator' field.
     * A combination of factors to identify the initiator of the event
     * @return This builder.
     */
    public org.rightnow.logging.events.GenericEvent.Builder clearEventInitiator() {
      event_initiator = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
     * Gets the value of the 'event_name' field.
     * The common name of the event
     * @return The value.
     */
    public CharSequence getEventName() {
      return event_name;
    }

    /**
     * Sets the value of the 'event_name' field.
     * The common name of the event
     * @param value The value of 'event_name'.
     * @return This builder.
     */
    public org.rightnow.logging.events.GenericEvent.Builder setEventName(CharSequence value) {
      validate(fields()[1], value);
      this.event_name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
     * Checks whether the 'event_name' field has been set.
     * The common name of the event
     * @return True if the 'event_name' field has been set, false otherwise.
     */
    public boolean hasEventName() {
      return fieldSetFlags()[1];
    }


    /**
     * Clears the value of the 'event_name' field.
     * The common name of the event
     * @return This builder.
     */
    public org.rightnow.logging.events.GenericEvent.Builder clearEventName() {
      event_name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
     * Gets the value of the 'event_id' field.
     * The ID of the initiating request
     * @return The value.
     */
    public CharSequence getEventId() {
      return event_id;
    }

    /**
     * Sets the value of the 'event_id' field.
     * The ID of the initiating request
     * @param value The value of 'event_id'.
     * @return This builder.
     */
    public org.rightnow.logging.events.GenericEvent.Builder setEventId(CharSequence value) {
      validate(fields()[2], value);
      this.event_id = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
     * Checks whether the 'event_id' field has been set.
     * The ID of the initiating request
     * @return True if the 'event_id' field has been set, false otherwise.
     */
    public boolean hasEventId() {
      return fieldSetFlags()[2];
    }


    /**
     * Clears the value of the 'event_id' field.
     * The ID of the initiating request
     * @return This builder.
     */
    public org.rightnow.logging.events.GenericEvent.Builder clearEventId() {
      event_id = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
     * Gets the value of the 'correlated_event_id' field.
     * The ID of the correlated request
     * @return The value.
     */
    public CharSequence getCorrelatedEventId() {
      return correlated_event_id;
    }

    /**
     * Sets the value of the 'correlated_event_id' field.
     * The ID of the correlated request
     * @param value The value of 'correlated_event_id'.
     * @return This builder.
     */
    public org.rightnow.logging.events.GenericEvent.Builder setCorrelatedEventId(CharSequence value) {
      validate(fields()[3], value);
      this.correlated_event_id = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
     * Checks whether the 'correlated_event_id' field has been set.
     * The ID of the correlated request
     * @return True if the 'correlated_event_id' field has been set, false otherwise.
     */
    public boolean hasCorrelatedEventId() {
      return fieldSetFlags()[3];
    }


    /**
     * Clears the value of the 'correlated_event_id' field.
     * The ID of the correlated request
     * @return This builder.
     */
    public org.rightnow.logging.events.GenericEvent.Builder clearCorrelatedEventId() {
      correlated_event_id = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
     * Gets the value of the 'session_id' field.
     * The ID of the user session that first generated the request
     * @return The value.
     */
    public CharSequence getSessionId() {
      return session_id;
    }

    /**
     * Sets the value of the 'session_id' field.
     * The ID of the user session that first generated the request
     * @param value The value of 'session_id'.
     * @return This builder.
     */
    public org.rightnow.logging.events.GenericEvent.Builder setSessionId(CharSequence value) {
      validate(fields()[4], value);
      this.session_id = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
     * Checks whether the 'session_id' field has been set.
     * The ID of the user session that first generated the request
     * @return True if the 'session_id' field has been set, false otherwise.
     */
    public boolean hasSessionId() {
      return fieldSetFlags()[4];
    }


    /**
     * Clears the value of the 'session_id' field.
     * The ID of the user session that first generated the request
     * @return This builder.
     */
    public org.rightnow.logging.events.GenericEvent.Builder clearSessionId() {
      session_id = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
     * Gets the value of the 'user_id' field.
     * The user ID associated with the event
     * @return The value.
     */
    public Integer getUserId() {
      return user_id;
    }

    /**
     * Sets the value of the 'user_id' field.
     * The user ID associated with the event
     * @param value The value of 'user_id'.
     * @return This builder.
     */
    public org.rightnow.logging.events.GenericEvent.Builder setUserId(int value) {
      validate(fields()[5], value);
      this.user_id = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
     * Checks whether the 'user_id' field has been set.
     * The user ID associated with the event
     * @return True if the 'user_id' field has been set, false otherwise.
     */
    public boolean hasUserId() {
      return fieldSetFlags()[5];
    }


    /**
     * Clears the value of the 'user_id' field.
     * The user ID associated with the event
     * @return This builder.
     */
    public org.rightnow.logging.events.GenericEvent.Builder clearUserId() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
     * Gets the value of the 'org_id' field.
     * The organization ID associated with the event
     * @return The value.
     */
    public Integer getOrgId() {
      return org_id;
    }

    /**
     * Sets the value of the 'org_id' field.
     * The organization ID associated with the event
     * @param value The value of 'org_id'.
     * @return This builder.
     */
    public org.rightnow.logging.events.GenericEvent.Builder setOrgId(int value) {
      validate(fields()[6], value);
      this.org_id = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
     * Checks whether the 'org_id' field has been set.
     * The organization ID associated with the event
     * @return True if the 'org_id' field has been set, false otherwise.
     */
    public boolean hasOrgId() {
      return fieldSetFlags()[6];
    }


    /**
     * Clears the value of the 'org_id' field.
     * The organization ID associated with the event
     * @return This builder.
     */
    public org.rightnow.logging.events.GenericEvent.Builder clearOrgId() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
     * Gets the value of the 'staff_id' field.
     * The staff ID associated with the event
     * @return The value.
     */
    public Integer getStaffId() {
      return staff_id;
    }

    /**
     * Sets the value of the 'staff_id' field.
     * The staff ID associated with the event
     * @param value The value of 'staff_id'.
     * @return This builder.
     */
    public org.rightnow.logging.events.GenericEvent.Builder setStaffId(int value) {
      validate(fields()[7], value);
      this.staff_id = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
     * Checks whether the 'staff_id' field has been set.
     * The staff ID associated with the event
     * @return True if the 'staff_id' field has been set, false otherwise.
     */
    public boolean hasStaffId() {
      return fieldSetFlags()[7];
    }


    /**
     * Clears the value of the 'staff_id' field.
     * The staff ID associated with the event
     * @return This builder.
     */
    public org.rightnow.logging.events.GenericEvent.Builder clearStaffId() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
     * Gets the value of the 'ip_address' field.
     * The ip address of the server from which the event originated
     * @return The value.
     */
    public CharSequence getIpAddress() {
      return ip_address;
    }

    /**
     * Sets the value of the 'ip_address' field.
     * The ip address of the server from which the event originated
     * @param value The value of 'ip_address'.
     * @return This builder.
     */
    public org.rightnow.logging.events.GenericEvent.Builder setIpAddress(CharSequence value) {
      validate(fields()[8], value);
      this.ip_address = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
     * Checks whether the 'ip_address' field has been set.
     * The ip address of the server from which the event originated
     * @return True if the 'ip_address' field has been set, false otherwise.
     */
    public boolean hasIpAddress() {
      return fieldSetFlags()[8];
    }


    /**
     * Clears the value of the 'ip_address' field.
     * The ip address of the server from which the event originated
     * @return This builder.
     */
    public org.rightnow.logging.events.GenericEvent.Builder clearIpAddress() {
      ip_address = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
     * Gets the value of the 'aws_id' field.
     * The EC2 instance ID of the server triggering the event
     * @return The value.
     */
    public CharSequence getAwsId() {
      return aws_id;
    }

    /**
     * Sets the value of the 'aws_id' field.
     * The EC2 instance ID of the server triggering the event
     * @param value The value of 'aws_id'.
     * @return This builder.
     */
    public org.rightnow.logging.events.GenericEvent.Builder setAwsId(CharSequence value) {
      validate(fields()[9], value);
      this.aws_id = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
     * Checks whether the 'aws_id' field has been set.
     * The EC2 instance ID of the server triggering the event
     * @return True if the 'aws_id' field has been set, false otherwise.
     */
    public boolean hasAwsId() {
      return fieldSetFlags()[9];
    }


    /**
     * Clears the value of the 'aws_id' field.
     * The EC2 instance ID of the server triggering the event
     * @return This builder.
     */
    public org.rightnow.logging.events.GenericEvent.Builder clearAwsId() {
      aws_id = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
     * Gets the value of the 'timestamp' field.
     * The UTC time the event occurred
     * @return The value.
     */
    public Long getTimestamp() {
      return timestamp;
    }

    /**
     * Sets the value of the 'timestamp' field.
     * The UTC time the event occurred
     * @param value The value of 'timestamp'.
     * @return This builder.
     */
    public org.rightnow.logging.events.GenericEvent.Builder setTimestamp(long value) {
      validate(fields()[10], value);
      this.timestamp = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
     * Checks whether the 'timestamp' field has been set.
     * The UTC time the event occurred
     * @return True if the 'timestamp' field has been set, false otherwise.
     */
    public boolean hasTimestamp() {
      return fieldSetFlags()[10];
    }


    /**
     * Clears the value of the 'timestamp' field.
     * The UTC time the event occurred
     * @return This builder.
     */
    public org.rightnow.logging.events.GenericEvent.Builder clearTimestamp() {
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
     * Gets the value of the 'elapsed_time' field.
     * The total elapsed time to complete the event in milliseconds
     * @return The value.
     */
    public Long getElapsedTime() {
      return elapsed_time;
    }

    /**
     * Sets the value of the 'elapsed_time' field.
     * The total elapsed time to complete the event in milliseconds
     * @param value The value of 'elapsed_time'.
     * @return This builder.
     */
    public org.rightnow.logging.events.GenericEvent.Builder setElapsedTime(long value) {
      validate(fields()[11], value);
      this.elapsed_time = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
     * Checks whether the 'elapsed_time' field has been set.
     * The total elapsed time to complete the event in milliseconds
     * @return True if the 'elapsed_time' field has been set, false otherwise.
     */
    public boolean hasElapsedTime() {
      return fieldSetFlags()[11];
    }


    /**
     * Clears the value of the 'elapsed_time' field.
     * The total elapsed time to complete the event in milliseconds
     * @return This builder.
     */
    public org.rightnow.logging.events.GenericEvent.Builder clearElapsedTime() {
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
     * Gets the value of the 'event_details' field.
     * An arbitrary JSON object that stores event details like browser user agent OS type and version
     * @return The value.
     */
    public CharSequence getEventDetails() {
      return event_details;
    }

    /**
     * Sets the value of the 'event_details' field.
     * An arbitrary JSON object that stores event details like browser user agent OS type and version
     * @param value The value of 'event_details'.
     * @return This builder.
     */
    public org.rightnow.logging.events.GenericEvent.Builder setEventDetails(CharSequence value) {
      validate(fields()[12], value);
      this.event_details = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
     * Checks whether the 'event_details' field has been set.
     * An arbitrary JSON object that stores event details like browser user agent OS type and version
     * @return True if the 'event_details' field has been set, false otherwise.
     */
    public boolean hasEventDetails() {
      return fieldSetFlags()[12];
    }


    /**
     * Clears the value of the 'event_details' field.
     * An arbitrary JSON object that stores event details like browser user agent OS type and version
     * @return This builder.
     */
    public org.rightnow.logging.events.GenericEvent.Builder clearEventDetails() {
      event_details = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
     * Gets the value of the 'event_date' field.
     * The UTC date the event occured
     * @return The value.
     */
    public CharSequence getEventDate() {
      return event_date;
    }

    /**
     * Sets the value of the 'event_date' field.
     * The UTC date the event occured
     * @param value The value of 'event_date'.
     * @return This builder.
     */
    public org.rightnow.logging.events.GenericEvent.Builder setEventDate(CharSequence value) {
      validate(fields()[13], value);
      this.event_date = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
     * Checks whether the 'event_date' field has been set.
     * The UTC date the event occured
     * @return True if the 'event_date' field has been set, false otherwise.
     */
    public boolean hasEventDate() {
      return fieldSetFlags()[13];
    }


    /**
     * Clears the value of the 'event_date' field.
     * The UTC date the event occured
     * @return This builder.
     */
    public org.rightnow.logging.events.GenericEvent.Builder clearEventDate() {
      event_date = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    @Override
    public GenericEvent build() {
      try {
        GenericEvent record = new GenericEvent();
        record.event_initiator = fieldSetFlags()[0] ? this.event_initiator : (CharSequence) defaultValue(fields()[0]);
        record.event_name = fieldSetFlags()[1] ? this.event_name : (CharSequence) defaultValue(fields()[1]);
        record.event_id = fieldSetFlags()[2] ? this.event_id : (CharSequence) defaultValue(fields()[2]);
        record.correlated_event_id = fieldSetFlags()[3] ? this.correlated_event_id : (CharSequence) defaultValue(fields()[3]);
        record.session_id = fieldSetFlags()[4] ? this.session_id : (CharSequence) defaultValue(fields()[4]);
        record.user_id = fieldSetFlags()[5] ? this.user_id : (Integer) defaultValue(fields()[5]);
        record.org_id = fieldSetFlags()[6] ? this.org_id : (Integer) defaultValue(fields()[6]);
        record.staff_id = fieldSetFlags()[7] ? this.staff_id : (Integer) defaultValue(fields()[7]);
        record.ip_address = fieldSetFlags()[8] ? this.ip_address : (CharSequence) defaultValue(fields()[8]);
        record.aws_id = fieldSetFlags()[9] ? this.aws_id : (CharSequence) defaultValue(fields()[9]);
        record.timestamp = fieldSetFlags()[10] ? this.timestamp : (Long) defaultValue(fields()[10]);
        record.elapsed_time = fieldSetFlags()[11] ? this.elapsed_time : (Long) defaultValue(fields()[11]);
        record.event_details = fieldSetFlags()[12] ? this.event_details : (CharSequence) defaultValue(fields()[12]);
        record.event_date = fieldSetFlags()[13] ? this.event_date : (CharSequence) defaultValue(fields()[13]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
          WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
          throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
          READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
          throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
